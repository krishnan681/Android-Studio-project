orignall



import React, { useContext, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
} from "react-native";
import { AuthContext } from "./AuthContext";

const Login = ({ navigation }) => {
  const { Login } = useContext(AuthContext);
  const [mobileno, setMobileno] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = () => {
    Login(mobileno, password, navigation);
    setMobileno("");
    setPassword("");
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Signpost Phone Book</Text>
      <TextInput
        style={styles.input}
        placeholder="Mobile Number"
        keyboardType="phone-pad"
        placeholderTextColor="#999"
        maxLength={10}
        value={mobileno}
        onChangeText={setMobileno}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={password}
        placeholderTextColor="#999"
        onChangeText={setPassword}
      />

      <TouchableOpacity>
        <Text style={styles.forgotPassword}>
          Note: Your Password is Signpost
        </Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
        <Text style={styles.loginText}>Login</Text>
      </TouchableOpacity>
      <View style={styles.signupContainer}>
        <Text style={styles.signupText}>Don’t have an account? </Text>
        <TouchableOpacity onPress={() => navigation.navigate("Signup")}>
          <Text style={styles.signupLink}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
    backgroundColor: "#f9f9f9",
  },
  header: {
    fontSize: 32,
    fontWeight: "bold",
    marginBottom: 20,
    color: "#6a0dad",
    textAlign: "center",
  },
  input: {
    width: "100%",
    height: 50,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 10,
    fontSize: 16,
    marginBottom: 15,
    backgroundColor: "#fff",
  },
  forgotPassword: {
    color: "#888",
    alignSelf: "flex-end",
    marginBottom: 20,
  },
  loginButton: {
    width: "100%",
    height: 50,
    backgroundColor: "#6a0dad",
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 20,
  },
  loginText: {
    color: "#fff",
    fontWeight: "bold",
    fontSize: 16,
  },
  signupContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  signupText: {
    color: "#888",
  },
  signupLink: {
    color: "#6a0dad",
    fontWeight: "bold",
  },
});

export default Login;




















































import React, { useContext, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Image,
} from "react-native";
import LinearGradient from "react-native-linear-gradient";
import Icon from "react-native-vector-icons/FontAwesome"; // You can change the icon library if needed
import { AuthContext } from "./AuthContext";

const Login = ({ navigation }) => {
  const { Login } = useContext(AuthContext);
  const [mobileno, setMobileno] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = () => {
    Login(mobileno, password, navigation);
    setMobileno("");
    setPassword("");
  };

  return (
    <LinearGradient
      colors={["#4CAF50", "#2E7D32"]} // Adjust gradient colors as needed
      style={styles.container}
    >
      <View style={styles.logoContainer}>
        <Image
          source={require("../src/assets/images/comaany-logo.png")} // Replace with your logo
          style={styles.logo}
          resizeMode="contain"
        />
      </View>

      <View style={styles.card}>
        <Text style={styles.header}>
          <Text style={styles.loginText}>Log in</Text> to your account.
        </Text>

        <View style={styles.inputContainer}>
          <Icon name="phone" size={20} color="#555" style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder="Mobile Number"
            keyboardType="phone-pad"
            placeholderTextColor="#999"
            maxLength={10}
            value={mobileno}
            onChangeText={setMobileno}
          />
        </View>

        <View style={styles.inputContainer}>
          <Icon name="lock" size={20} color="#555" style={styles.icon} />
          <TextInput
            style={styles.input}
            placeholder="Password"
            secureTextEntry
            placeholderTextColor="#999"
            value={password}
            onChangeText={setPassword}
          />
        </View>

        <TouchableOpacity>
          <Text style={styles.forgotPassword}>Forgot Password?</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
          <Text style={styles.loginButtonText}>Login</Text>
        </TouchableOpacity>

        <View style={styles.signupContainer}>
          <Text style={styles.signupText}>Don’t have an account? </Text>
          <TouchableOpacity onPress={() => navigation.navigate("Signup")}>
            <Text style={styles.signupLink}>Sign up</Text>
          </TouchableOpacity>
        </View>
      </View>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  logoContainer: {
    marginBottom: 20,
    alignItems: "center",
  },
  logo: {
    width: 120,
    height: 120,
  },
  card: {
    width: "100%",
    backgroundColor: "#fff",
    borderRadius: 15,
    padding: 20,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 5, // Android shadow
  },
  header: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 15,
    color: "#333",
    textAlign: "center",
  },
  loginText: {
    color: "#4CAF50", // Matching the gradient color theme
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "center",
    width: "100%",
    backgroundColor: "#f1f1f1",
    borderRadius: 8,
    paddingHorizontal: 10,
    marginBottom: 15,
  },
  icon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    height: 50,
    fontSize: 16,
  },
  forgotPassword: {
    color: "#4CAF50",
    alignSelf: "flex-end",
    marginBottom: 20,
  },
  loginButton: {
    width: "100%",
    height: 50,
    backgroundColor: "#4CAF50",
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 20,
  },
  loginButtonText: {
    color: "#fff",
    fontWeight: "bold",
    fontSize: 16,
  },
  signupContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  signupText: {
    color: "#888",
  },
  signupLink: {
    color: "#4CAF50",
    fontWeight: "bold",
  },
});

export default Login;



































orignall

// =============================== updated signup page ======================================
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Button,
  Image,
} from "react-native";
// import RNPickerSelect from "react-native-picker-select";
import { RadioButton } from "react-native-paper";
import LinearGradient from "react-native-linear-gradient";
import { KeyboardAvoidingView, Platform } from "react-native";


const Signup = ({ navigation }) => {
  const [mybusinessname, setBusinessname] = useState("");
  const [mydoorno, setDoorno] = useState("");
  const [mycity, setCity] = useState("");
  const [mypincode, setPincode] = useState("");
  const [myproduct, setProduct] = useState("");
  const [mylandLine, setLandLine] = useState("");
  const [myLcode, setLcode] = useState("");
  const [myemail, setEmail] = useState("");
  const [myprefix, setPrefix] = useState("");
  const [mymobileno, setMobileno] = useState("");
  const [isRegistered, setIsRegistered] = useState(false);

  // Check if the mobile number is registered
  const checkMobileNumber = async (mobile) => {
    try {
      const response = await fetch(
        `https://signpostphonebook.in/client_insert.php`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ mobileno: mobile }),
        }
      );
      const result = await response.json();
      console.log("Check Mobile Response:", result);

      if (result.registered) {
        setIsRegistered(true);
        Alert.alert(
          "Mobile Number Exists",
          "This mobile number is already registered."
        );
        setMobileno("");
      } else {
        setIsRegistered(false);
      }
    } catch (error) {
      console.error("Error checking mobile:", error);
      Alert.alert("Error", "Unable to verify mobile number.");
    }
  };

  // Insert new record if the mobile number is not registered
  const insertRecord = async () => {
    if (isRegistered) {
      Alert.alert("Error", "Mobile number is already registered.");
      return;
    }
    // Frontend validation for required fields
    if (
      !mybusinessname ||
      !mydoorno ||
      !mycity ||
      !mypincode ||
      !myprefix ||
      !mymobileno
    ) {
      Alert.alert("Validation Error", "Please enter all required fields.");
      return;
    }

    const Data = {
      businessname: mybusinessname,
      doorno: mydoorno,
      city: mycity,
      pincode: mypincode,
      prefix: myprefix,
      mobileno: mymobileno,
      email: myemail,
      product: myproduct,
      landline: mylandLine,
      lcode: myLcode,
    };

    console.log("Sending Data:", Data);

    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert.php",
        {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Data),
        }
      );

      const jsonResponse = await response.json();
      console.log("Server Response:", jsonResponse);

      if (jsonResponse.Message) {
        Alert.alert("Success", jsonResponse.Message);
        navigation.navigate("Login");
        setBusinessname("");
        setCity("");
        setDoorno("");
        setEmail("");
        setLandLine("");
        setPincode("");
        setLcode("");
        setMobileno("");
        setPrefix("");
        setProduct("");
      } else {
        Alert.alert("Error", "Unexpected response from server.");
      }
    } catch (error) {
      console.error("Fetch Error:", error);
      Alert.alert("Error", error.message);
    }
  };

  return (

    <KeyboardAvoidingView
  behavior={Platform.OS === "ios" ? "padding" : "height"}
  style={{ flex: 1 }}
>
    <View style={styles.container}>
    {/* Gradient Background Only at the Top */}
    <LinearGradient colors={["#FF69B4", "#FFFFFF"]} style={styles.topSection}>
      <Image
        source={require('../src/assets/images/comaany-logo.png')} // Replace with your logo
        style={styles.logo}
        resizeMode="contain"
      />
    </LinearGradient>

    {/* White Card Covering Bottom Section */}
    <View style={styles.card}>
      <Text style={styles.header}>
        <Text style={styles.signupText}>Sign Up</Text> to create an account.
      </Text>

      <ScrollView contentContainerStyle={{ paddingBottom: 20 }}>

        <Text style={styles.label}>Mobile Number :</Text>
        <TextInput
          placeholder="Mobile Number"
          keyboardType="number-pad"
          maxLength={10}
          style={styles.input}
          value={mymobileno}
          onChangeText={setMobileno}
        />

        <Text style={styles.label}>Person / Business Name :</Text>
        <TextInput
          placeholder="Person/Business Name"
          style={styles.input}
          onChangeText={setBusinessname}
          value={mybusinessname}
        />

        <Text style={styles.label}>Prefix:</Text>
        <RadioButton.Group
          onValueChange={(value) => setPrefix(value)}
          value={myprefix}
        >
          <View style={styles.radioContainer}>
            <View style={styles.radioOption}>
              <RadioButton value="Mr." />
              <Text>Mr.</Text>
            </View>
            <View style={styles.radioOption}>
              <RadioButton value="Ms." />
              <Text>Ms.</Text>
            </View>
            <View style={styles.radioOption}>
              <RadioButton value="M/s." />
              <Text>M/s. (for Firms)</Text>
            </View>
          </View>
        </RadioButton.Group>

        <Text style={styles.label}>Address :</Text>
        <TextInput
          placeholder="Address"
          style={[styles.input, { height: 80 }]}
          multiline
          onChangeText={setDoorno}
          value={mydoorno}
        />

        <Text style={styles.label}>City :</Text>
        <TextInput
          placeholder="City"
          style={styles.input}
          onChangeText={setCity}
          value={mycity}
        />

        <Text style={styles.label}>Pincode :</Text>
        <TextInput
          placeholder="Pincode"
          keyboardType="number-pad"
          maxLength={6}
          style={styles.input}
          onChangeText={setPincode}
          value={mypincode}
        />

        <Text style={styles.label}>Product / Service :</Text>
        <TextInput
          placeholder="Product"
          style={styles.input}
          onChangeText={setProduct}
          value={myproduct}
        />

        <Text style={styles.label}>Landline Number :</Text>
        <TextInput
          placeholder="Landline Number"
          keyboardType="number-pad"
          style={styles.input}
          onChangeText={setLandLine}
          value={mylandLine}
        />

        <Text style={styles.label}>STD Code :</Text>
        <TextInput
          placeholder="STD Code"
          keyboardType="number-pad"
          style={styles.input}
          onChangeText={setLcode}
          value={myLcode}
        />

        <Text style={styles.label}>Email :</Text>
        <TextInput
          style={styles.input}
          placeholder="example@mail.com"
          keyboardType="email-address"
          value={myemail}
          onChangeText={setEmail}
          autoCapitalize="none"
        />

        <TouchableOpacity style={styles.signupButton} onPress={insertRecord}>
          <Text style={styles.signupButtonText}>Submit</Text>
        </TouchableOpacity>
      </ScrollView>

      <View style={styles.loginContainer}>
        <Text style={styles.loginText}>Already have an account? </Text>
        <TouchableOpacity onPress={() => navigation.navigate("Login")}>
          <Text style={styles.loginLink}>Login</Text>
        </TouchableOpacity>
      </View>
    </View>
  </View>

  </KeyboardAvoidingView>
  
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#FFFFFF",
  },
  
  topSection: {
    height: "20%", // Covers the top area
    justifyContent: "center",
    alignItems: "center",
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
  },
  logo: {
    width: 150,
    height: 50,
  },
  card: {
    flex: 1,
    backgroundColor: "#fff",
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    padding: 20,
    marginTop: -20,
    alignItems: "center",
    elevation: 5,
    minHeight: "75%",  // Ensure enough space
  },
  
  header: {
    fontSize: 22,
    fontWeight: "bold",
    marginBottom: 15,
    color: "#333",
    textAlign: "center",
  },
  signupText: {
    color: "#FF69B4",
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 10,
    height: 50,
    marginBottom: 10,
    width: "100%",
  },
  radioContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "100%",
    marginBottom: 10,
  },
  radioOption: {
    flexDirection: "row",
    alignItems: "center",
  },
  signupButton: {
    width: "100%",
    height: 50,
    backgroundColor: "#FF69B4",
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    marginTop: 10,
  },
  signupButtonText: {
    color: "white",
    fontWeight: "bold",
    fontSize: 16,
  },
  loginContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginTop: 15,
  },
  loginText: {
    color: "#888",
  },
  loginLink: {
    color: "#FF69B4",
    fontWeight: "bold",
  },
});


export default Signup;

























































orignall from expo



// =============================== updated signup page ======================================
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Button,
} from "react-native";
import RNPickerSelect from "react-native-picker-select";
import { RadioButton } from "react-native-paper";

const Signup = ({ navigation }) => {
  const [mybusinessname, setBusinessname] = useState("");
  const [mydoorno, setDoorno] = useState("");
  const [mycity, setCity] = useState("");
  const [mypincode, setPincode] = useState("");
  const [myproduct, setProduct] = useState("");
  const [mylandLine, setLandLine] = useState("");
  const [myLcode, setLcode] = useState("");
  const [myemail, setEmail] = useState("");
  const [myprefix, setPrefix] = useState("");
  const [mymobileno, setMobileno] = useState("");
  const [isRegistered, setIsRegistered] = useState(false);

  // Check if the mobile number is registered
  const checkMobileNumber = async (mobile) => {
    try {
      const response = await fetch(
        `https://signpostphonebook.in/client_insert.php`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ mobileno: mobile }),
        }
      );
      const result = await response.json();
      console.log("Check Mobile Response:", result);

      if (result.registered) {
        setIsRegistered(true);
        Alert.alert(
          "Mobile Number Exists",
          "This mobile number is already registered."
        );
        setMobileno("");
      } else {
        setIsRegistered(false);
      }
    } catch (error) {
      console.error("Error checking mobile:", error);
      Alert.alert("Error", "Unable to verify mobile number.");
    }
  };

  // Insert new record if the mobile number is not registered
  const insertRecord = async () => {
    if (isRegistered) {
      Alert.alert("Error", "Mobile number is already registered.");
      return;
    }
    // Frontend validation for required fields
    if (
      !mybusinessname ||
      !mydoorno ||
      !mycity ||
      !mypincode ||
      !myprefix ||
      !mymobileno
    ) {
      Alert.alert("Validation Error", "Please enter all required fields.");
      return;
    }

    const Data = {
      businessname: mybusinessname,
      doorno: mydoorno,
      city: mycity,
      pincode: mypincode,
      prefix: myprefix,
      mobileno: mymobileno,
      email: myemail,
      product: myproduct,
      landline: mylandLine,
      lcode: myLcode,
    };

    console.log("Sending Data:", Data);

    try {
      const response = await fetch(
        "https://signpostphonebook.in/client_insert.php",
        {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Data),
        }
      );

      const jsonResponse = await response.json();
      console.log("Server Response:", jsonResponse);

      if (jsonResponse.Message) {
        Alert.alert("Success", jsonResponse.Message);
        navigation.navigate("Login");
        setBusinessname("");
        setCity("");
        setDoorno("");
        setEmail("");
        setLandLine("");
        setPincode("");
        setLcode("");
        setMobileno("");
        setPrefix("");
        setProduct("");
      } else {
        Alert.alert("Error", "Unexpected response from server.");
      }
    } catch (error) {
      console.error("Fetch Error:", error);
      Alert.alert("Error", error.message);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Signpost Phonebook</Text>
      <View style={styles.formContainer}>
        <ScrollView>
          <Text style={styles.label}>Mobile Number :</Text>
          <TextInput
            placeholder="Mobile Number"
            keyboardType="number-pad"
            maxLength={10}
            style={styles.input}
            value={mymobileno}
            onChangeText={(text) => setMobileno(text)}
            onEndEditing={() => checkMobileNumber(mymobileno)}
          />

          <Text style={styles.label}>Person / Business Name :</Text>
          <TextInput
            placeholder="Person/Business Name"
            style={styles.input}
            onChangeText={(text) => setBusinessname(text)}
            value={mybusinessname}
          />

          <View style={styles.prefixcontainer}>
            <Text style={styles.label}>Prefix:</Text>
            <RadioButton.Group
              onValueChange={(value) => setPrefix(value)}
              value={myprefix}
            >
              <View style={styles.radioContainer}>
                <View style={styles.radioOption}>
                  <RadioButton value="Mr." />
                  <Text>Mr.</Text>
                </View>
                <View style={styles.radioOption}>
                  <RadioButton value="Ms." />
                  <Text>Ms.</Text>
                </View>
                <View style={styles.radioOption}>
                  <RadioButton value="M/s." />
                  <Text>M/s.(for Firms)</Text>
                </View>
              </View>
            </RadioButton.Group>
          </View>

          <Text style={styles.label}>Address :</Text>
          <TextInput
            placeholder="Address"
            style={[styles.input, { height: 80 }]}
            multiline
            onChangeText={(text) => setDoorno(text)}
            value={mydoorno}
          />

          <Text style={styles.label}>City :</Text>
          <TextInput
            placeholder="City"
            style={styles.input}
            onChangeText={(text) => setCity(text)}
            value={mycity}
          />

          <Text style={styles.label}>Pincode :</Text>
          <TextInput
            placeholder="Pincode"
            keyboardType="number-pad"
            maxLength={6}
            style={styles.input}
            onChangeText={(text) => setPincode(text)}
            value={mypincode}
          />

          <Text style={styles.label}>Product / Service :</Text>
          <TextInput
            placeholder="Product"
            style={styles.input}
            onChangeText={(text) => setProduct(text)}
            value={myproduct}
          />

          <Text style={styles.label}>Landline Number :</Text>
          <TextInput
            placeholder="Landline Number"
            keyboardType="number-pad"
            style={styles.input}
            onChangeText={(text) => setLandLine(text)}
            value={mylandLine}
          />

          <Text style={styles.label}>STD Code :</Text>
          <TextInput
            placeholder="STD Code"
            keyboardType="number-pad"
            style={styles.input}
            onChangeText={(text) => setLcode(text)}
            value={myLcode}
          />

          <Text style={styles.label}>Email :</Text>
          <TextInput
            style={styles.input}
            placeholder="example@mail.com"
            keyboardType="email-address"
            value={myemail}
            onChangeText={(text) => setEmail(text)}
            autoCapitalize="none"
          />

          <TouchableOpacity style={styles.button} onPress={insertRecord}>
            <Text style={styles.buttonText}>Submit</Text>
          </TouchableOpacity>
        </ScrollView>
        <View style={styles.loginContainer}>
          <Text style={styles.loginText}>Already Have an Account? </Text>
          <TouchableOpacity onPress={() => navigation.navigate("Login")}>
            <Text style={styles.loginLink}>Login</Text>
          </TouchableOpacity>
        </View>
      </View>
      {/* <Button
        title="Already Have an Account? Login"
        onPress={() => navigation.navigate("Login")}
      /> */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#ffffff",
  },
  inputAndroid: {
    borderWidth: 3,
    borderColor: "#000000",
  },
  headerText: {
    textAlign: "center",
    fontSize: 30,
    fontWeight: "500",
    color: "#6a0dad",
    marginTop: 60,
  },
  formContainer: {
    flex: 1,
    backgroundColor: "#ffffff",
    borderTopLeftRadius: 400,
    padding: 20,
    marginTop: "5%",
  },
  label: {
    fontSize: 18,
    marginBottom: 10,
    fontWeight: "700",
    backgroundColor: "#ffffff",
  },
  input: {
    borderWidth: 1,
    borderColor: "#000000",
    borderRadius: 5,
    marginVertical: 8,
    paddingHorizontal: 10,
    height: 50,
  },
  prefixcontainer: {
    padding: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 8,
  },
  radioOption: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  radioContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  button: {
    backgroundColor: "#6a0dad",
    borderRadius: 5,
    paddingVertical: 15,
    alignItems: "center",
    marginTop: 10,
  },
  buttonText: {
    color: "white",
    fontSize: 18,
    fontWeight: "bold",
  },
  loginContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  loginText: {
    color: "#888",
  },
  loginLink: {
    color: "#6a0dad", // purple link color
    fontWeight: "bold",
  },
});

export default Signup;



































































profile orignall




import React, {useState, useEffect, useContext} from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Modal,
  Button,
  ScrollView,
  MenuItem,
  TouchableWithoutFeedback,
} from 'react-native';
import Icon from "react-native-vector-icons/FontAwesome";

import {AuthContext} from './AuthContext';
import axios from 'axios';


const Profile = () => {


  const [taskCount, setTaskCount] = useState(0); // Task count (set to 0 instead of "")
  const [referralCount, setReferralCount] = useState(0);
  const {userData, setUserData} = useContext(AuthContext);
  const [profileImage, setProfileImage] = useState(null);
  const date = new Date().toISOString().split('T')[0];
  const [error, setError] = useState(null);
  const [membershipModalVisible, setMembershipModalVisible] = useState(false);
  const openMembershipModal = () => setMembershipModalVisible(true);
  const closeMembershipModal = () => setMembershipModalVisible(false);

  // profile image function

  useEffect(() => {
    const fetchProfileImage = async () => {
      if (!userData?.id) return;

      try {
        const response = await axios.get(
          `https://signpostphonebook.in/image_upload_for_new_database.php?id=${userData.id}`,
        );
        // console.log("Fetched Image Response:", response.data);

        if (response.data.success) {
          const imageUrl = response.data.imageUrl;
          const fullUrl = imageUrl.startsWith('http')
            ? imageUrl
            : `https://signpostphonebook.in/${imageUrl}`;
          setProfileImage(fullUrl + `?t=${new Date().getTime()}`); // Prevent caching
          setUserData(prevData => ({...prevData, profileImage: fullUrl}));
        }
      } catch (error) {
        console.error('Error fetching profile image:', error);
      }
    };

    fetchProfileImage();
  }, [userData.id, setUserData]);

  const handleImagePick = async () => {
    const {status} = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission Denied', 'Please allow access to the gallery.');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled && result.assets?.length > 0) {
      const selectedImage = result.assets[0].uri;
      console.log('Selected Image URI:', selectedImage);
      setProfileImage(selectedImage);
      uploadImage(selectedImage);
    }
  };

  const uploadImage = async imageUri => {
    const formData = new FormData();
    formData.append('profileImage', {
      uri: imageUri,
      name: 'profile.jpg',
      type: 'image/jpeg',
    });
    formData.append('id', userData?.id);
    formData.append(
      'name',
      userData?.businessname || userData?.person || 'Unknown',
    );

    try {
      const response = await axios.post(
        'https://signpostphonebook.in/image_upload_for_new_database.php',
        formData,
        {headers: {'Content-Type': 'multipart/form-data'}},
      );

      //   console.log("Upload Response:", response.data);

      if (response.data.success) {
        const fullUrl = response.data.imageUrl.startsWith('http')
          ? response.data.imageUrl
          : `https://signpostphonebook.in/${response.data.imageUrl}`;

        setProfileImage(fullUrl + `?t=${new Date().getTime()}`); // Prevent caching
        setUserData(prevData => ({...prevData, profileImage: fullUrl}));
      } else {
        console.error('Upload failed:', response.data.message);
        Alert.alert('Upload Failed', response.data.message);
      }
    } catch (error) {
      console.error('Error uploading image:', error.message);
      Alert.alert(
        'Upload Error',
        'An error occurred while uploading the image.',
      );
    }
  };

  const fetchUserData = async (userid, date, signal) => {
    try {
      if (!userid || !date) {
        throw new Error('Please provide a valid ID and Date.');
      }

      const response = await fetch(
        `https://signpostphonebook.in/data_entry_details.php?userid=${userid}&date=${date}`,
        {signal}, // Attach the abort signal
      );

      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }

      const data = await response.json();

      if (data.status === 'success' && data.data) {
        return data.data;
      } else if (
        data.status === 'error' &&
        data.message === 'No record found.'
      ) {
        return {count: 0}; // Ensure frontend handles missing data correctly
      } else {
        throw new Error(data.message || 'Failed to fetch details.');
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('Error fetching user data:', error.message);
      }
      return null;
    }
  };

  useEffect(() => {
    if (!userData?.id || !date) {
      setError('Invalid user data or date.');
      return;
    }

    const controller = new AbortController();
    const signal = controller.signal;

    const getData = async () => {
      setIsLoading(true);
      const data = await fetchUserData(userData.id, date, signal);
      setIsLoading(false);

      if (data) {
        setTaskCount(data.count || 0); // Ensure count is handled even if 0
        setError(null);
      } else {
        setError('No data found.');
        setTaskCount(0); // Reset count if no data is found
      }
    };

    getData();
    if (typeof fetchReferralCount === 'function') {
      fetchReferralCount();
    }

    return () => controller.abort(); // Cancel fetch request on unmount
  }, [userData, date]);

  // Fetch referral count
  const fetchReferralCount = async () => {
    if (!userData?.mobileno) return;
    try {
      const response = await fetch(
        `https://signpostphonebook.in/try_referrals_count.php?mobile=${encodeURIComponent(
          userData.mobileno,
        )}`,
      );
      const data = await response.text();
      const match = data.match(/Total Referred: (\d+)/);
      if (match) setReferralCount(parseInt(match[1], 10));
    } catch (error) {
      setError('Failed to fetch referral count.');
    }
  };

  // style={styles.profileImage}







  return (
    <View style={styles.container}>
      {/* Top Section */}
      <View style={styles.header}>
 

        {/* Profile Image */}
        <Image
                source={{ uri: profileImage }}
                style={styles.profileImage}
                resizeMode="contain"
              />
        <Text style={styles.userName}> {userData?.businessname || userData?.person || 'Your name'}</Text>
        {/* <Text style={styles.userRole}>Joining date</Text> */}

        {/* Follow Stats */}
        <View style={styles.statsContainer}>
          <Text style={styles.statsText}>
            <Text style={styles.statsNumber}>{taskCount}</Text> Total Count
          </Text>
          <Text style={styles.statsText}>
            <Text style={styles.statsNumber}>{referralCount}</Text> Referral Count
          </Text>
        </View>
      </View>

      {/* Contact Information */}
      <ScrollView style={styles.infoSection}>
        <View style={styles.infoRow}>
          <Icon name="envelope" size={20} color="#666" />
          <Text style={styles.infoText}>{userData.description || 'description'}</Text>
        </View>
        <View style={styles.infoRow}>
          <Icon name="phone" size={20} color="#666" />
          <Text style={styles.infoText}> {userData.product || 'Product'}</Text>
        </View>
        <View style={styles.infoRow}>
          <Icon name="twitter" size={20} color="#1DA1F2" />
          <Text style={styles.infoText}>{userData.address || 'Address'}, {userData.city || 'City'},{' '}
          {userData.pincode || 'Pincode'}</Text>
        </View>
        <View style={styles.infoRow}>
          <Icon name="behance" size={20} color="#1769FF" />
          <Text style={styles.infoText}>{userData.mobileno || 'Mobile No'}</Text>
        </View>
        <View style={styles.infoRow}>
          <Icon name="facebook" size={20} color="#4267B2" />
          <Text style={styles.infoText}>{userData.email || 'Email'}</Text>
        </View>




        <TouchableOpacity
          style={styles.openModalButton}
          onPress={openMembershipModal}
        >
          <Text style={styles.buttonText}>Membership Card</Text>
        </TouchableOpacity>




 {/* Membership Card Modal */}
 <Modal
          visible={membershipModalVisible}
          animationType="fade"
          transparent={true}
        >
          <View style={styles.overlay}>
            <View style={styles.modalContainer}>
              {/* Header Section */}
              <View style={styles.heaader}>
                <Image
                  source={require("../src/assets/images/Logo_Phonebook.jpg")}
                  style={styles.logo}
                />
                <Text style={styles.heaaderText}>SIGNPOST PHONE BOOK</Text>

                {/* Close Button */}
                <TouchableOpacity
                  style={styles.closeButton}
                  onPress={closeMembershipModal}
                >
                  <Text style={styles.closeButtonText}>X</Text>
                </TouchableOpacity>
              </View>

              {/* Membership Card Content */}
              <Text style={styles.membershipText}>Membership Card</Text>
              <View style={styles.cardContent}>
                <Image
                  source={{ uri: profileImage }}
                  style={styles.memprofileImage}
                />
                <View style={styles.userInfo}>
                  <Text style={styles.userName}>
                    {userData?.businessname || userData?.person}
                  </Text>
                  <Text style={styles.validText}>
                    Valid Until: Date Not Available
                  </Text>
                  <Text style={styles.addressText}>
                    Address: {userData?.address || "N/A"},{userData?.city || "N/A"},{userData?.pincode || "N/A"} 
                  </Text>
                </View>
              </View>

              {/* Footer Section */}
              <View style={styles.footer}>
                <Text style={styles.footerText}>
                  This card is valid for 5 years from the date of issue.
                </Text>
                <Text style={styles.footerAddress}>
                  46, Sidco Industrial Estate, Coimbatore - 641021
                </Text>
              </View>
            </View>
          </View>
        </Modal>



      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8F9FA",
  },
  header: {
    backgroundColor: "#1E3CFF", // Blue background
    alignItems: "center",
    paddingVertical: 30,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  backIcon: {
    position: "absolute",
    left: 20,
    top: 15,
  },
  settingsIcon: {
    position: "absolute",
    right: 20,
    top: 15,
  },
  profileText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  profileImage: {
    width: 80,
    height: 80,
    borderRadius: 40,
    marginTop: 10,
    borderWidth: 2,
    borderColor: "#fff",
  },
  userName: {
    color: "#fff",
    fontSize: 20,
    fontWeight: "bold",
    marginTop: 10,
  },
  userRole: {
    color: "#fff",
    fontSize: 14,
  },
  statsContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "60%",
    marginTop: 15,
  },
  statsText: {
    color: "#fff",
    fontSize: 14,
  },
  statsNumber: {
    fontWeight: "bold",
    fontSize: 16,
  },
  infoSection: {
    padding: 20,
  },
  infoRow: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  infoText: {
    marginLeft: 15,
    fontSize: 16,
    color: "#333",
  },

  // /membership cars styles

  overlay: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0,0,0,0.5)",
  },
  modalContainer: {
    backgroundColor: "white",
    width: "100%",
    borderRadius: 10,
    overflow: "hidden",
    alignItems: "center",
  },
  heaader: {
    backgroundColor: "#ff4081",
    width: "100%",
    flexDirection: "row", // Arrange items in a row
    alignItems: "center", // Align items vertically
    justifyContent: "center", // Align items horizontally
    padding: 15,
  },

  logo: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  heaaderText: {
    fontSize: 22,
    fontWeight: "bold",
    color: "white",
    bottom: 25,

    marginLeft: 10,
    marginBottom: -50,
  },
  membershipText: {
    fontSize: 16,
    fontWeight: "bold",
    marginVertical: 5,
  },
  cardContent: {
    flexDirection: "row",
    alignItems: "center",
    padding: 15,
  },
  memprofileImage: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  userInfo: {
    marginLeft: 10,
  },
  userName: {
    fontSize: 18,
    fontWeight: "bold",
  },
  validText: {
    fontSize: 14,
    fontWeight: "bold",
    color: "gray",
    marginTop: 5,
  },
  addressText: {
    width: "90%",
    fontSize: 14,
    color: "gray",
    marginTop: 5,
    flexWrap: "wrap",
  },
  footer: {
    backgroundColor: "#ff4081",
    width: "100%",
    padding: 10,
    alignItems: "center",
  },
  footerText: {
    fontSize: 14,
    color: "white",
  },
  footerAddress: {
    fontSize: 12,
    color: "white",
  },
  closeButton: {
    position: "absolute",
    right: 15,
    top: 15,
    backgroundColor: "white",
    width: 25,
    height: 25,
    borderRadius: 15,
    alignItems: "center",
    justifyContent: "center",
  },
  ProfilecloseButton: {
    position: "absolute",
    right: "10",
  },

  ProfilecloseButtonText: {
    color: "white",
    backgroundColor: "black",
    width: 35,
    height: 35,
    fontSize: 26,
    paddingLeft: 10,
    // left: 150,
    // marginVertical: 15,
    borderRadius: 25,
    fontWeight: "bold",
  },
});

export default Profile;







































































profile edited

import React, { useState,useContext,useEffect } from "react";
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  Modal,
  StyleSheet,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome";

import {AuthContext} from './AuthContext';
import axios from 'axios';


const Profile = () => {


  const [taskCount, setTaskCount] = useState(0); // Task count (set to 0 instead of "")
  const [referralCount, setReferralCount] = useState(0);
  const {userData, setUserData} = useContext(AuthContext);
  const [profileImage, setProfileImage] = useState(null);
  const date = new Date().toISOString().split('T')[0];
  const [error, setError] = useState(null);
  const [membershipModalVisible, setMembershipModalVisible] = useState(false);
  const openMembershipModal = () => setMembershipModalVisible(true);
  const closeMembershipModal = () => setMembershipModalVisible(false);

  // profile image function

  useEffect(() => {
    const fetchProfileImage = async () => {
      if (!userData?.id) return;

      try {
        const response = await axios.get(
          `https://signpostphonebook.in/image_upload_for_new_database.php?id=${userData.id}`,
        );
        // console.log("Fetched Image Response:", response.data);

        if (response.data.success) {
          const imageUrl = response.data.imageUrl;
          const fullUrl = imageUrl.startsWith('http')
            ? imageUrl
            : `https://signpostphonebook.in/${imageUrl}`;
          setProfileImage(fullUrl + `?t=${new Date().getTime()}`); // Prevent caching
          setUserData(prevData => ({...prevData, profileImage: fullUrl}));
        }
      } catch (error) {
        console.error('Error fetching profile image:', error);
      }
    };

    fetchProfileImage();
  }, [userData.id, setUserData]);

  const handleImagePick = async () => {
    const {status} = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission Denied', 'Please allow access to the gallery.');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    if (!result.canceled && result.assets?.length > 0) {
      const selectedImage = result.assets[0].uri;
      console.log('Selected Image URI:', selectedImage);
      setProfileImage(selectedImage);
      uploadImage(selectedImage);
    }
  };

  const uploadImage = async imageUri => {
    const formData = new FormData();
    formData.append('profileImage', {
      uri: imageUri,
      name: 'profile.jpg',
      type: 'image/jpeg',
    });
    formData.append('id', userData?.id);
    formData.append(
      'name',
      userData?.businessname || userData?.person || 'Unknown',
    );

    try {
      const response = await axios.post(
        'https://signpostphonebook.in/image_upload_for_new_database.php',
        formData,
        {headers: {'Content-Type': 'multipart/form-data'}},
      );

      //   console.log("Upload Response:", response.data);

      if (response.data.success) {
        const fullUrl = response.data.imageUrl.startsWith('http')
          ? response.data.imageUrl
          : `https://signpostphonebook.in/${response.data.imageUrl}`;

        setProfileImage(fullUrl + `?t=${new Date().getTime()}`); // Prevent caching
        setUserData(prevData => ({...prevData, profileImage: fullUrl}));
      } else {
        console.error('Upload failed:', response.data.message);
        Alert.alert('Upload Failed', response.data.message);
      }
    } catch (error) {
      console.error('Error uploading image:', error.message);
      Alert.alert(
        'Upload Error',
        'An error occurred while uploading the image.',
      );
    }
  };

  const fetchUserData = async (userid, date, signal) => {
    try {
      if (!userid || !date) {
        throw new Error('Please provide a valid ID and Date.');
      }

      const response = await fetch(
        `https://signpostphonebook.in/data_entry_details.php?userid=${userid}&date=${date}`,
        {signal}, // Attach the abort signal
      );

      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }

      const data = await response.json();

      if (data.status === 'success' && data.data) {
        return data.data;
      } else if (
        data.status === 'error' &&
        data.message === 'No record found.'
      ) {
        return {count: 0}; // Ensure frontend handles missing data correctly
      } else {
        throw new Error(data.message || 'Failed to fetch details.');
      }
    } catch (error) {
      if (error.name !== 'AbortError') {
        console.error('Error fetching user data:', error.message);
      }
      return null;
    }
  };

  useEffect(() => {
    if (!userData?.id || !date) {
      setError('Invalid user data or date.');
      return;
    }

    const controller = new AbortController();
    const signal = controller.signal;

    const getData = async () => {
      setIsLoading(true);
      const data = await fetchUserData(userData.id, date, signal);
      setIsLoading(false);

      if (data) {
        setTaskCount(data.count || 0); // Ensure count is handled even if 0
        setError(null);
      } else {
        setError('No data found.');
        setTaskCount(0); // Reset count if no data is found
      }
    };

    getData();
    if (typeof fetchReferralCount === 'function') {
      fetchReferralCount();
    }

    return () => controller.abort(); // Cancel fetch request on unmount
  }, [userData, date]);

  // Fetch referral count
  const fetchReferralCount = async () => {
    if (!userData?.mobileno) return;
    try {
      const response = await fetch(
        `https://signpostphonebook.in/try_referrals_count.php?mobile=${encodeURIComponent(
          userData.mobileno,
        )}`,
      );
      const data = await response.text();
      const match = data.match(/Total Referred: (\d+)/);
      if (match) setReferralCount(parseInt(match[1], 10));
    } catch (error) {
      setError('Failed to fetch referral count.');
    }
  };

  // style={styles.profileImage}







  return (
    <View style={styles.container}>
    {/* Header Section */}
    <View style={styles.header}>
   

      {/* Profile Image */}
      <Image
        source={{ uri: profileImage }}
        style={styles.profileImage}
        resizeMode="contain"
      />
      <Text style={styles.userName}>{userData?.businessname || userData?.person || 'Your Name'}</Text>

      {/* Stats Section (Fixed Position) */}
      <View style={styles.statsContainer}>
        <View style={styles.statBox}>
          <Text style={styles.statsNumber}>{userData.taskCount || 0}</Text>
          <Text style={styles.statsText}>Total Count</Text>
        </View>
        <View style={styles.divider} />
        <View style={styles.statBox}>
          <Text style={styles.statsNumber}>{userData.referralCount || 0}</Text>
          <Text style={styles.statsText}>Referral Count</Text>
        </View>
      </View>
    </View>

    {/* Contact Information */}
    <ScrollView style={styles.infoSection}>
      <View style={styles.infoRow}>
        <Icon name="envelope" size={20} color="#666" />
        <Text style={styles.infoText}>{userData.description || "Description"}</Text>
      </View>
      <View style={styles.infoRow}>
        <Icon name="cube" size={20} color="#666" />
        <Text style={styles.infoText}>{userData.product || "Product"}</Text>
      </View>
      <View style={styles.infoRow}>
        <Icon name="map-marker" size={20} color="#1DA1F2" />
        <Text style={styles.infoText}>
          {userData.address || "Address"}, {userData.city || "City"}, {userData.pincode || "Pincode"}
        </Text>
      </View>
      <View style={styles.infoRow}>
        <Icon name="phone" size={20} color="#1769FF" />
        <Text style={styles.infoText}>{userData.mobileno || "Mobile No"}</Text>
      </View>
      <View style={styles.infoRow}>
        <Icon name="envelope" size={20} color="#4267B2" />
        <Text style={styles.infoText}>{userData.email || "Email"}</Text>
      </View>
    </ScrollView>

    {/* Membership Card Button (Fixed Position) */}
    <View style={styles.fixedButtonContainer}>
      <TouchableOpacity style={styles.openModalButton} onPress={openMembershipModal}>
        <Text style={styles.buttonText}>Membership Card</Text>
      </TouchableOpacity>
    </View>

    {/* Membership Card Modal */}
    <Modal visible={membershipModalVisible} animationType="fade" transparent={true}>
      <View style={styles.overlay}>
        <View style={styles.modalContainer}>
          {/* Header */}
          <View style={styles.modalHeader}>
            <Image source={require("../src/assets/images/Logo_Phonebook.jpg")} style={styles.logo} />
            <Text style={styles.headerText}>SIGNPOST PHONE BOOK</Text>
            <TouchableOpacity style={styles.closeButton} onPress={closeMembershipModal}>
              <Text style={styles.closeButtonText}>X</Text>
            </TouchableOpacity>
          </View>

          {/* Membership Card Content */}
          <Text style={styles.membershipText}>Membership Card</Text>
          <View style={styles.cardContent}>
            <Image source={{ uri: profileImage }} style={styles.memprofileImage} />
            <View style={styles.userInfo}>
              <Text style={styles.userName}>{userData?.businessname || userData?.person}</Text>
              <Text style={styles.validText}>Valid Until: Date Not Available</Text>
              <Text style={styles.addressText}>
                Address: {userData?.address || "N/A"}, {userData?.city || "N/A"}, {userData?.pincode || "N/A"}
              </Text>
            </View>
          </View>

          {/* Footer */}
          <View style={styles.footer}>
            <Text style={styles.footerText}>This card is valid for 5 years from the date of issue.</Text>
            <Text style={styles.footerAddress}>46, Sidco Industrial Estate, Coimbatore - 641021</Text>
          </View>
        </View>
      </View>
    </Modal>
  </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#F8F9FA" },
  header: {
    backgroundColor: "#1E3CFF",
    alignItems: "center",
    paddingVertical: 30,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  backIcon: { position: "absolute", left: 20, top: 15 },
  settingsIcon: { position: "absolute", right: 20, top: 15 },
  profileImage: { width: 80, height: 80, borderRadius: 40, marginTop: 10, borderWidth: 2, borderColor: "#fff" },
  userName: { color: "#fff", fontSize: 20, fontWeight: "bold", marginTop: 10 },
  
  statsContainer: { flexDirection: "row", justifyContent: "center", alignItems: "center", marginTop: 10 },
  statBox: { alignItems: "center", paddingHorizontal: 20 },
  statsNumber: { fontSize: 18, fontWeight: "bold", color: "#fff" },
  statsText: { fontSize: 14, color: "#fff" },
  divider: { height: 30, width: 2, backgroundColor: "#fff", marginHorizontal: 10 },

  infoSection: { padding: 20 },
  infoRow: { flexDirection: "row", alignItems: "center", paddingVertical: 10, borderBottomWidth: 1, borderBottomColor: "#ddd" },
  infoText: { marginLeft: 15, fontSize: 16, color: "#333" },

  fixedButtonContainer: { position: "absolute", bottom: 20, alignSelf: "center" },
  openModalButton: { backgroundColor: "#ff4081", padding: 10, borderRadius: 5 },
  buttonText: { color: "white", fontSize: 16, fontWeight: "bold" },

  overlay: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0,0,0,0.5)" },
  modalContainer: { backgroundColor: "white", width: "90%", borderRadius: 10, overflow: "hidden", alignItems: "center" },
  modalHeader: { backgroundColor: "#ff4081", width: "100%", flexDirection: "row", alignItems: "center", justifyContent: "center", padding: 15 },
  closeButton: { position: "absolute", right: 15, top: 15 },
  closeButtonText: { fontSize: 20, color: "white", fontWeight: "bold" },
});
export default Profile;
